<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="store" noun="TalentProfileType">
        <description></description>
        <in-parameters>
            <parameter name="emplPositionClassId" default="title.split(' ').collect{ it.toLowerCase().capitalize() }.join('')"/>
            <parameter name="title" required="true"/>
            <parameter name="description"/>
        </in-parameters>
        <out-parameters>
            <parameter name="emplPositionClassId"/>
        </out-parameters>
        <actions>
            <service-call name="store#mantle.humanres.position.EmplPositionClass" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="store" noun="TalentProfileTypeDimensionType">
        <description></description>
        <in-parameters>
            <parameter name="uomDimensionTypeId" default="description.split(' ').collect{ it.toLowerCase().capitalize() }.join('')"/>
            <parameter name="description" required="true"/>
            <parameter name="uomTypeEnumId"/>
            <parameter name="defaultUomId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="uomDimensionTypeId"/>
        </out-parameters>
        <actions>
            <service-call name="store#moqui.basic.UomDimensionType" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="storeAndAdd" noun="TalentProfileTypeDimensionType">
        <implements service="resistmanagement.ProfileServices.store#TalentProfileTypeDimensionType"/>
        <in-parameters>
            <parameter name="emplPositionClassId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="emplPositionClassId"/>
            <parameter name="enumId"/>
        </out-parameters>
        <actions>
            <service-call name="resistmanagement.ProfileServices.store#TalentProfileTypeDimensionType" in-map="context" out-map="context"/>
            <service-call name="store#mantle.humanres.position.EmplPositionClassDimension" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="store" noun="TalentProfileTypeClassificationType">
        <description></description>
        <in-parameters>
            <parameter name="enumId"/>
            <parameter name="enumTypeId" default-value="PartyClassificationType"/>
            <parameter name="enumCode"/>
            <parameter name="sequenceNum"/>
            <parameter name="description" required="true"/>
            <parameter name="optionValue"/>
            <parameter name="optionIndicator"/>
        </in-parameters>
        <out-parameters>
            <parameter name="enumId"/>
        </out-parameters>
        <actions>
            <set field="enumId" from="enumId ?: camelCaseToPretty(enumTypeId).split(' ').collect{ it[0] }.join('').toLowerCase().capitalize() + description.split(' ').collect{ it.toLowerCase().capitalize() }.join('')"/>
            <service-call name="store#moqui.basic.Enumeration" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="storeAndAdd" noun="TalentProfileTypeClassificationType">
        <implements service="resistmanagement.ProfileServices.store#TalentProfileTypeClassificationType"/>
        <in-parameters>
            <parameter name="emplPositionClassId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="emplPositionClassId"/>
            <parameter name="enumId"/>
            <parameter name="classificationTypeEnumId"/>
        </out-parameters>
        <actions>
            <service-call name="resistmanagement.ProfileServices.store#TalentProfileTypeClassificationType" in-map="context" out-map="context"/>
            <set field="classificationTypeEnumId" from="enumId"/>
            <service-call name="store#mantle.party.EmplPositionClassPtyClsTp" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="store" noun="TalentProfileTypeClassificationTypeAttribute">
        <description></description>
        <in-parameters>
            <parameter name="partyClassificationId"/>
            <parameter name="classificationTypeEnumId" required="true"/>
            <parameter name="parentClassificationId"/>
            <parameter name="description" required="true"/>
            <parameter name="standardCode"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyClassificationId"/>
        </out-parameters>
        <actions>
            <set field="partyClassificationId" from="partyClassificationId ?: camelCaseToPretty(classificationTypeEnumId).split(' ')[0].toLowerCase().capitalize() + description.split(' ').collect{ it.toLowerCase().capitalize() }.join('')"/>
            <service-call name="store#mantle.party.PartyClassification" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="store" noun="TalentProfileTypeSkillType">
        <description></description>
        <in-parameters>
            <parameter name="enumId"/>
            <parameter name="enumTypeId" default-value="SkillType"/>
            <parameter name="enumCode"/>
            <parameter name="sequenceNum"/>
            <parameter name="description" required="true"/>
            <parameter name="optionValue"/>
            <parameter name="optionIndicator"/>
        </in-parameters>
        <out-parameters>
            <parameter name="enumId"/>
        </out-parameters>
        <actions>
            <set field="enumId" from="enumId ?: camelCaseToPretty(enumTypeId).split(' ').collect{ it[0] }.join('').toLowerCase().capitalize() + description.split(' ').collect{ it.toLowerCase().capitalize() }.join('')"/>
            <service-call name="store#moqui.basic.Enumeration" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="storeAndAdd" noun="TalentProfileTypeSkillType">
        <in-parameters>
            <parameter name="emplPositionClassId" required="true"/>
            <parameter name="enumId"/>
            <parameter name="enumTypeId" default-value="SkillType"/>
            <parameter name="enumCode"/>
            <parameter name="sequenceNum"/>
            <parameter name="description" required="true"/>
            <parameter name="optionValue"/>
            <parameter name="optionIndicator"/>
        </in-parameters>
        <out-parameters>
            <parameter name="emplPositionClassId"/>
            <parameter name="enumId"/>
            <parameter name="skillTypeEnumId"/>
        </out-parameters>
        <actions>
            <service-call name="resistmanagement.ProfileServices.store#TalentProfileTypeSkillType" in-map="context" out-map="context"/>
            <set field="skillTypeEnumId" from="enumId"/>
            <service-call name="store#mantle.humanres.position.EmplPositionClassSkill" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="store" noun="PartyClassificationAppl">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="classificationTypeEnumId" required="true"/>
            <parameter name="partyClassificationId"/>
            <parameter name="fromDate" required="true" default="ec.user.nowTimestamp"/>
            <auto-parameters entity-name="mantle.party.PartyClassificationAppl" include="nonpk"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters entity-name="mantle.party.PartyClassificationAppl"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyClassificationAndAppl" list="pcapList">
                <econdition field-name="partyId"/><econdition field-name="classificationTypeEnumId"/>
                <date-filter/><order-by field-name="-thruDate,-fromDate"/></entity-find>
            <iterate list="pcapList" entry="pcap">
                <set field="pcapOut" from="pcap"/><set field="pcapOut.thruDate" from="ec.user.nowTimestamp"/>
                <service-call name="update#mantle.party.PartyClassificationAppl" in-map="pcapOut"/></iterate>

            <if condition="partyId &amp;&amp; partyClassificationId &amp;&amp; fromDate">
                <service-call name="store#mantle.party.PartyClassificationAppl" in-map="context" out-map="context"/></if>
        </actions>
    </service>

    <service verb="set" noun="PartySkills">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="emplPositionClassId" required="true"/>
            <parameter name="skillTypeEnumIdList" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="skillTypeEnumIdList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.humanres.position.EmplPositionClassSkill" list="epcsList">
                <econdition field-name="emplPositionClassId"/></entity-find>
            <entity-find entity-name="mantle.humanres.ability.PartySkill" list="psList">
                <econdition field-name="skillTypeEnumId" operator="in" from="epcsList.skillTypeEnumId"/>
                <econdition field-name="partyId"/></entity-find>

            <log level="warn" message="epcsList.skillTypeEnumId ${epcsList.skillTypeEnumId}"/>
            <log level="warn" message="psList.skillTypeEnumId ${psList.skillTypeEnumId}"/>
            <log level="warn" message="skillTypeEnumIdList ${skillTypeEnumIdList}"/>

            <iterate list="epcsList" entry="epcs">
                <if condition="skillTypeEnumIdList?.contains(epcs.skillTypeEnumId) &amp;&amp; !psList.skillTypeEnumId.contains(epcs.skillTypeEnumId)"><then>
                    <log level="warn" message="create ${epcs.skillTypeEnumId}"/>
                    <service-call name="create#mantle.humanres.ability.PartySkill" in-map="[partyId:partyId, skillTypeEnumId:epcs.skillTypeEnumId]"/>
                </then><else-if condition="!skillTypeEnumIdList?.contains(epcs.skillTypeEnumId) &amp;&amp; psList.skillTypeEnumId.contains(epcs.skillTypeEnumId)">
                    <log level="warn" message="delete ${epcs.skillTypeEnumId}"/>
                    <service-call name="delete#mantle.humanres.ability.PartySkill" in-map="[partyId:partyId, skillTypeEnumId:epcs.skillTypeEnumId]"/>
                </else-if><else-if condition="skillTypeEnumIdList?.contains(epcs.skillTypeEnumId) &amp;&amp; psList.skillTypeEnumId.contains(epcs.skillTypeEnumId)">
                    <log level="warn" message="both exist ${epcs.skillTypeEnumId}"/>
                </else-if><else-if condition="!skillTypeEnumIdList?.contains(epcs.skillTypeEnumId) &amp;&amp; !psList.skillTypeEnumId.contains(epcs.skillTypeEnumId)">
                    <log level="warn" message="neither exist ${epcs.skillTypeEnumId}"/>
                </else-if></if>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="ProfilePictureInfo">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="firstChar" required="true"/>
            <parameter name="primaryColor" required="true"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.Party" value-field="party">
                <field-map field-name="partyId"/></entity-find-one>
            <set field="firstChar" from="(party?.pseudoId ?: '?')[0].toUpperCase()"/>
            <set field="colorList" type="NewList" from="['#fbf8ccff', '#fde4cfff', '#ffcfd2ff', '#f1c0e8ff', '#cfbaf0ff', '#a3c4f3ff', '#90dbf4ff', '#8eecf5ff', '#98f5e1ff', '#b9fbc0ff']"/>
            <set field="primaryColor" from="colorList[Math.abs( new Random().nextInt(colorList.size()) )]"/>
        </actions>
    </service>

    <service verb="upload" noun="PartyContent">
        <description>
            Upload a file for a Party to create a PartyContent entry.

            If a file is not uploaded, there is no defaultFileName, AND there is no defaultFileRenderLocation, then an error is thrown that a file must be uploaded.
        </description>
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="partyContentTypeEnumId" required="true"/>
            <parameter name="defaultFileName"/>
            <parameter name="defaultFileRenderLocation"><description>Screen location to render the default file. Defaults to the text render mode.</description></parameter>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="saveContentLocation" type="Boolean" default="true"/>
            <parameter name="fileMimeTypeList" required="true" type="List" default="['image/jpeg', 'image/png', 'image/svg+xml', 'image/webp', 'image/apng', 'image/avif', 'image/gif']"><description>
                See: https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types for this list.</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="partyContentId"/>
            <parameter name="attachmentReference" type="org.moqui.content.ResourceReference"/>
        </out-parameters>
        <actions>
<!--            <set field="test" from="fileMimeTypeList.collect{ fileMimeTypeList.indexOf(it) &lt; fileMimeTypeList.size() -1 ? it.split('/')[1].split('\\+')[0] : 'or ' + it.split('/')[1].split('\\+')[0] }.join(', ')"/>-->
<!--            <log level="warn" message="test ${test}"/>-->

            <if condition="contentFile != null &amp;&amp; !fileMimeTypeList.contains(contentFile.getContentType())">
                <!-- see: https://www.javacodeexamples.com/solution-java-util-regex-patternsyntaxexception-dangling-meta-character-near-index-0/3446 for why not split('+') and is split('\\+') -->
                <!-- see: https://freemarker.apache.org/docs/dgui_misc_autoescaping.html for why not split('\\+') and is split('\\\\+') -->
                <return error="true" message="The file type you used: ${contentFile.getContentType().split('/')[1].split('\\\\+')[0] } is not supported. Please upload a ${fileMimeTypeList.collect{ fileMimeTypeList.indexOf(it) &lt; fileMimeTypeList.size() -1 ? it.split('/')[1].split('\\\\+')[0] : 'or ' + it.split('/')[1].split('\\\\+')[0] }.join(', ')} file format."/>
            </if>
            <if condition="!defaultFileName &amp;&amp; !defaultFileRenderLocation &amp;&amp; contentFile == null"><return error="true" message="File upload is required."/></if>

            <set field="filename" from="contentFile?.getName() ?: defaultFileName"/>
            <if condition="org.moqui.resource.ResourceReference.isTextFilename(filename)"><then>
                <set field="contentRoot" from="ec.user.getPreference('mantle.content.root') ?: 'dbresource://mantle/content'"/>
            </then><else>
                <set field="contentRoot" from="ec.user.getPreference('mantle.content.large.root') ?: 'dbresource://mantle/content'"/>
            </else></if>

            <entity-find entity-name="mantle.party.PartyContent" list="pcList">
                <econdition field-name="partyId"/>
                <econdition field-name="partyContentTypeEnumId"/>
                <econdition field-name="contentLocation" operator="like" value="${contentRoot}/party/${partyId}/content_%/${filename}"/>
                <order-by field-name="-contentDate"/>
            </entity-find>

            <if condition="pcList?.size() &gt; 0">
                <service-call name="update#mantle.party.PartyContent" in-map="[partyContentId:pcList.getFirst().partyContentId, contentDate:ec.user.nowTimestamp]" out-map="context"/>
                <return message="Using existing file with the name ${filename}"/>
            </if>
            <service-call name="create#mantle.party.PartyContent" in-map="[partyId:partyId, partyContentTypeEnumId:partyContentTypeEnumId]" out-map="context"/>

            <set field="contentLocation" value="${contentRoot}/party/${partyId}/content_${partyContentId}/${filename}"/>

            <set field="docRr" from="ec.resource.getLocationReference(contentLocation)"/>
            <script>
                fileStream = contentFile?.getName() ? contentFile.getInputStream() : new ByteArrayInputStream(ec.screen.makeRender().rootScreen(defaultFileRenderLocation).webappName(null).renderMode('text').render().getBytes())
                try { docRr.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <if condition="saveContentLocation"><service-call name="update#mantle.party.PartyContent"
                                                              in-map="[partyContentId:partyContentId, contentLocation:contentLocation]"/></if>
        </actions>
    </service>

    <service verb="upload" noun="ProfilePictureAttachment">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyContentId"/>
            <parameter name="attachmentReference" type="org.moqui.content.ResourceReference"/>
        </out-parameters>
        <actions>
            <service-call name="resistmanagement.ProfileServices.upload#PartyContent" in-map="context + [
                partyContentTypeEnumId:'PcntPrimaryImage', defaultFileName:'DefaultProfilePicture.svg',
                defaultFileRenderLocation:'component://resistmanagement/screen/resistmanagement/DefaultProfilePicture.xml']" out-map="context"/>
        </actions>
    </service>

    <service verb="upload" noun="PostAttachment">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyContentId"/>
            <parameter name="attachmentReference" type="org.moqui.content.ResourceReference"/>
        </out-parameters>
        <actions>
            <entity-find-count entity-name="mantle.party.PartyContent" count-field="postCount">
                <econdition field-name="partyId"/>
                <econdition field-name="partyContentTypeEnumId" value="PcntPost"/>
            </entity-find-count>
            <if condition="postCount &gt;= 12"><return error="true" message="Cannot upload more than 12 Posts"/></if>

            <service-call name="org.moqui.impl.ImageServices.convert#Image" in-map="[inputImage:contentFile, imageOutputFormat:'jpg']" out-map="context"/>
            <set field="contentFile" from="imageOutput"/>

<!--            <service-call name="resistmanagement.ProfileServices.upload#PartyContent" in-map="context + [partyContentTypeEnumId:'PcntPost']" out-map="context"/>-->
        </actions>
    </service>

    <service verb="check" noun="AccountEdit" authz-action="view">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <entity-find-count entity-name="mantle.party.PartyFromAndToRelationship" count-field="pfatrCount">
                <econdition field-name="toPartyId" from="partyId"/>
                <econdition field-name="relationshipTypeEnumId" value="PrtManager"/>
                <econdition field-name="fromPartyId" from="ec.user.userAccount.partyId"/>
                <date-filter/></entity-find-count>

            <if condition="pfatrCount == 0"><return type="danger" error="true" message="No Party found with id ${partyId}"/></if>
        </actions>
    </service>

    <service verb="update" noun="Account">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="pseudoId"/>
            <parameter name="bio"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
            <parameter name="pseudoId"/>
            <parameter name="partyContentId"/>
        </out-parameters>
        <actions>
<!--            <service-call name="resistmanagement.ProfileServices.check#AccountEdit" in-map="[partyId:partyId]"/>-->

<!--            <log level="warn" message="update#Account pseudoId ${pseudoId}"/>-->
            <if condition="pseudoId">
                <!-- no special characters, no spaces, all lowercase, max 30 characters -->
                <set field="pseudoId" from="pseudoId.toLowerCase().replaceAll('[^a-z]+', '')"/>
                <if condition="pseudoId.length() &gt; 30"><return type="info" error="true" message="Profile name cannot be above 30 characters. It is currently ${pseudoId.length()} characters; lease shorten it."/></if>

                <!-- pseudoId is intended to be unique. Check for existing pseudoId with same characters. -->
                <entity-find-one entity-name="mantle.party.Party" value-field="party" auto-field-map="[partyId:partyId]"/>
                <if condition="party != null &amp;&amp; party.pseudoId != pseudoId"><then>
                    <entity-find-count entity-name="mantle.party.Party" count-field="partyCount">
                        <econdition field-name="pseudoId"/></entity-find-count>
                    <if condition="partyCount &gt; 0"><return type="info" error="true" message="Profile name ${pseudoId} is not available. Please choose another."/></if>
                </then><else>
                    <service-call name="update#mantle.party.Party" in-map="[partyId:partyId, pseudoId:pseudoId]" out-map="outMap"/>
                </else></if>

<!--                <log level="warn" message="update#Account pseudoId ${pseudoId}"/>-->
<!--                <log level="warn" message="update#Account outMap.pseudoId ${outMap.pseudoId}"/>-->
            </if>
            <if condition="bio">
                <entity-find entity-name="mantle.party.PartyContent" list="partyContentList">
                    <econdition field-name="partyId"/>
                    <econdition field-name="partyContentTypeEnumId" value="PcntBio"/>
                    <order-by field-name="-contentDate"/></entity-find>
                <if condition="partyContentList"><then>
<!--                    <log level="warn" message="true partyContentList ${partyContentList}"/>-->
                    <service-call name="update#mantle.party.PartyContent" in-map="[partyContentId:partyContentList.getFirst().partyContentId, description:bio]" out-map="context"/>
                </then><else>
<!--                    <log level="warn" message="false partyContentList ${partyContentList}"/>-->
                    <service-call name="create#mantle.party.PartyContent" in-map="[partyId:partyId, partyContentTypeEnumId:'PcntBio', description:bio]" out-map="context"/>
                </else></if>
            </if>
        </actions>
    </service>

    <service verb="create" noun="CreatePersonProfile">
        <in-parameters>
            <parameter name="pseudoId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <!-- no special characters, no spaces, all lowercase, max 30 characters -->
            <set field="pseudoId" from="pseudoId.toLowerCase().replaceAll('[^a-z0-9]+', '')"/>
            <if condition="pseudoId.length() &gt; 30"><return type="info" error="true" message="Profile name cannot be above 30 characters. It is currently ${pseudoId.length()} characters; lease shorten it."/></if>

            <!-- pseudoId is intended to be unique. Check for existing pseudoId with same characters. -->
            <entity-find-count entity-name="mantle.party.Party" count-field="partyCount">
                <econdition field-name="pseudoId"/></entity-find-count>
            <if condition="partyCount &gt; 0"><return type="info" error="true" message="Profile name ${pseudoId} is not available. Please choose another."/></if>

            <service-call name="create#mantle.party.Party" in-map="[pseudoId:pseudoId, partyTypeEnumId:'PtyPerson']" out-map="context"/>
            <service-call name="create#mantle.party.PartyRole" in-map="[partyId:partyId, roleTypeId:'Customer']"/>
            <service-call name="create#mantle.party.PartyRole" in-map="[partyId:partyId, roleTypeId:'ClientManager']"/>
            <service-call name="create#mantle.party.PartyRelationship" in-map="[relationshipTypeEnumId:'PrtManager',
                fromPartyId:ec.user.userAccount.partyId, fromRoleTypeId:'Administrator', toPartyId:partyId, toRoleTypeId:'ClientManager',
                fromDate:ec.user.nowTimestamp]"/>
            <service-call name="resistmanagement.ProfileServices.upload#ProfilePictureAttachment" in-map="[partyId:partyId]"/>
        </actions>
    </service>

    <service verb="store" noun="TalentProfile">
        <in-parameters>
            <parameter name="emplPositionClassId" required="true"/>
            <parameter name="partyId" required="true"/>
            <parameter name="fromDate"/>
            <auto-parameters entity-name="mantle.humanres.position.EmplPositionClassParty" include="nonpk"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters entity-name="mantle.humanres.position.EmplPositionClassParty" include="pk"/>
        </out-parameters>
        <actions>
            <!-- If party is not a talent, make them a talent. -->
            <entity-find-count entity-name="mantle.party.PartyRole" count-field="talentRoleCount">
                <econdition field-name="partyId"/><econdition field-name="roleTypeId" value="Talent"/></entity-find-count>

            <if condition="talentRoleCount == 0">
                <service-call name="create#mantle.party.PartyRole" in-map="[partyId:partyId, roleTypeId:'Supplier']"/>
                <service-call name="create#mantle.party.PartyRole" in-map="[partyId:partyId, roleTypeId:'Talent']"/>
                <service-call name="create#mantle.party.PartyRelationship" in-map="[relationshipTypeEnumId:'PrtManager',
                    fromPartyId:ec.user.userAccount.partyId, fromRoleTypeId:'Administrator', toPartyId:partyId, toRoleTypeId:'Talent',
                    fromDate:ec.user.nowTimestamp]"/>
            </if>

            <if condition="!fromDate">
                <entity-find entity-name="mantle.humanres.position.EmplPositionClassParty" list="epcpList">
                    <econdition field-name="emplPositionClassId"/>
                    <econdition field-name="partyId"/>
                    <date-filter/><order-by field-name="-fromDate"/></entity-find>
                <set field="fromDate" from="epcpList?.getFirst()?.fromDate ?: ec.user.nowTimestamp"/>
            </if>
            <service-call name="store#mantle.humanres.position.EmplPositionClassParty" in-map="context" out-map="context"/>
        </actions>
    </service>

</services>
