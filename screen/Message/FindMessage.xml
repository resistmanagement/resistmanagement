<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-3.xsd"
        default-menu-title="Messages" default-menu-index="3" default-menu-include="false" render-modes="vue,qvue" server-static="vue,qvue" standalone="true">

    <!-- TODO: Change these to makes sense in the context of a screen not a message. -->
    <parameter name="toPartyId"/>
    <parameter name="fromPartyId"/>

    <always-actions>
        <!-- TODO: Fix how this is handled for john.doe -->
        <!--        <log level="warn" message="toPartyId ${toPartyId}"/>-->
        <entity-find entity-name="mantle.party.PartyDetailAndRoleAndContentAndSettingAndRelationship" list="accountList" distinct="true" cache="true">
            <econdition field-name="roleTypeId" value="ClientManager"/>
            <econdition field-name="partySettingTypeId" value="PartyVisibility"/>
            <econdition field-name="partyContentTypeEnumId" value="PcntPrimaryImage"/>
            <econdition field-name="contentLocation" operator="is-not-null"/>
            <econdition field-name="relationshipTypeEnumId" value="PrtManager"/>
            <econdition field-name="fromRoleTypeId" value="Administrator"/>
            <econdition field-name="toRoleTypeId" value="ClientManager"/>
            <econdition field-name="fromPartyId" from="ec.user.userAccount?.partyId"/>
            <date-filter/><select-field field-name="partyId"/>
        </entity-find>
        <!--        <log level="warn" message="accountList ${accountList}"/>-->
        <set field="fromPartyId" from="accountList?.getFirst()?.partyId"/>
        <if condition="!fromPartyId"><return message="Not allowed" error="true" type="danger"/></if>
        <service-call name="resistmanagement.ResistServices.check#AccountEdit" in-map="[partyId:fromPartyId]" out-map="checkAccountEdit"/>
        <if condition="!checkAccountEdit.allowed"><return message="Not allowed" error="true" type="danger"/></if>
    </always-actions>

    <transition name="createMessage" require-session-token="true"><actions>
        <service-call name="resistmanagement.ResistServices.check#AccountEdit" in-map="[partyId:fromPartyId]" out-map="AccountEdit"/>
        <if condition="!AccountEdit?.allowed"><return message="Not allowed" error="true"/></if>
        <service-call name="mantle.party.CommunicationServices.create#Message" in-map="[toPartyId:toPartyId,fromPartyId:fromPartyId,body:body,communicationEventTypeId:'ResistChatMessage']" out-map="newMessage"/>
        <entity-find entity-name="mantle.party.PartyContent" list="accountContentList">
            <econdition field-name="partyId" from="fromPartyId"/>
            <econdition field-name="partyContentTypeEnumId" value="PcntPrimaryImage"/>
            <econdition field-name="contentLocation" operator="is-not-null"/>
            <select-field field-name="partyId, pseudoId, partyContentId, contentLocation"/>
            <order-by field-name="-contentDate"/></entity-find>
        <if condition="accountContentList"><set field="newMessage.contentUrl" from="'/apps/Message/FindMessage/downloadPartyContent?partyContentId=' + accountContentList.getFirst().partyContentId"/></if>
        <set field="newMessage.fromPseudoId" from="accountContentList.getFirst()?.party?.pseudoId"/>
        <set field="newMessage.sent" from="true"/>
        <script>ec.web.sendJsonResponse([newMessage:newMessage])</script>
    </actions><default-response type="none"/></transition>
    <transition-include name="downloadPartyContent" location="component://resistmanagement/screen/Account/ViewAccount.xml"/>
    <transition name="getMessages" read-only="true">
        <actions>
            <!--        <log level="warn" message="context ${context.toString()}"/>-->

            <set field="accountList" from="[fromPartyId, toPartyId]"/>
            <entity-find entity-name="mantle.party.PartyContent" list="accountContentList">
                <econdition field-name="partyId" operator="in" from="accountList"/>
                <econdition field-name="partyContentTypeEnumId" value="PcntPrimaryImage"/>
                <econdition field-name="contentLocation" operator="is-not-null"/>
                <select-field field-name="partyId, pseudoId, partyContentId, contentLocation"/>
                <order-by field-name="-contentDate"/>
            </entity-find>
            <!--        <log level="warn" message="accountContentList ${accountContentList.partyId}"/>-->

            <set field="toParty" from="accountContentList?.find{it.partyId == toPartyId}"/>
            <set field="fromParty" from="accountContentList?.find{it.partyId == fromPartyId}"/>

            <!--            <log level="warn" message="toParty ${toParty}"/>-->
            <!--            <log level="warn" message="fromParty ${fromParty}"/>-->

<!--            <log level="warn" message="offset ${offset}"/>-->
            <set field="offset" from="offset?:0" type="Integer"/>
            <entity-find entity-name="mantle.party.communication.CommunicationEventAndPurpose" list="commEventList" limit="20" offset="offset*20">

                <econditions combine="or">
                    <econditions>
                        <econdition field-name="fromPartyId" ignore-if-empty="true"/>
                        <econdition field-name="toPartyId" ignore-if-empty="true"/>
                    </econditions>
                    <econditions>
                        <econdition field-name="fromPartyId" from="toPartyId" ignore-if-empty="true"/>
                        <econdition field-name="toPartyId" from="fromPartyId" ignore-if-empty="true"/>
                    </econditions>
                </econditions>
                <econdition field-name="communicationEventTypeId" value="ResistChatMessage"/>
                <select-field field-name="communicationEventId"/><select-field field-name="entryDate"/>
                <select-field field-name="statusId"/><select-field field-name="fromPartyId"/><select-field field-name="toPartyId"/>
                <select-field field-name="body"/>
                <order-by field-name="-entryDate"/>
            </entity-find>

            <!--            <log level="warn" message="commEventList ${commEventList}"/>-->

            <set field="messageList" from="[]"/>
            <iterate list="commEventList" entry="commEvent">
                <set field="partyContent" from="accountContentList?.find{it.partyId == commEvent.fromPartyId}"/>
                <!--                <log level="warn" message="partyContent ${partyContent}"/>-->
                <!--                <log level="warn" message="commEvent.fromPartyId ${commEvent.fromPartyId}"/>-->
                <set field="message" from="[
                    communicationEventId:commEvent.communicationEventId,
                    partyId:partyContent.partyId,
                    fromPseudoId:partyContent.party.pseudoId,
                    body:commEvent.body,
                    contentUrl:'/apps/Message/FindMessage/downloadPartyContent?partyContentId=' + partyContent.partyContentId]"/>
                <set field="message.sent" from="commEvent.fromPartyId == fromPartyId"/>
                <script>messageList.add(message)</script>
            </iterate>

            <!--            <log level="warn" message="messageList ${messageList}"/>-->
            <script>ec.web.sendJsonResponse([messageList:messageList])</script>
        </actions>
        <default-response type="none"/></transition>

    <widgets>
        <render-mode><text type="qvue"><![CDATA[
            <template>
                <div class="q-pa-md row justify-center">
                    <div style="width: 100%; max-width: 400px">
                        <q-infinite-scroll @load="onLoad" :initial-index="0" :offset="250" reverse>
                            <template slot="loading">
                                <div class="row justify-center q-my-md">
                                    <q-spinner color="primary" name="dots" size="40px" />
                                </div>
                            </template>
                            <template v-for="chatData in chatDataList.slice().reverse()">
                                <q-chat-message
                                        :key="chatData.communicationEventId"
                                        :name="chatData.fromPseudoId"
                                        :avatar="chatData.contentUrl"
                                        :text="[chatData.body]"
                                        :sent="chatData.sent"
                                />
                            </template>
                        </q-infinite-scroll>

                        <q-form @submit.prevent="createMessage" autocapitalize="off" autocomplete="off" class="q-pa-md">
                            <m-text-line dense outlined name="body" v-model="newServiceInfo.body" stack-label label="Message" type="text" size="100"></m-text-line>

                            <q-btn dense outline no-caps color="primary" type="submit" name="submitBtn" label="Send"></q-btn>
                        </q-form>
                    </div>
                </div>
            </template>
            <script>
                module.exports = {
                    data: function() { return {
                        chatDataList: [], newServiceInfo:{ body:"", fromPartyId:this.$root.currentParameters.fromPartyId, toPartyId:this.$root.currentParameters.toPartyId }, items: [ {}, {}, {}, {}, {}, {}, {} ]
                    } },
                    methods: {
                        updateChatDataList: function() {
                            // console.log(this)
                            var vm = this;
                            $.ajax({ type:"GET", url:"/apps/Message/FindMessage/getMessages",
                                dataType:"json", headers:{ Accept:'application/json' },
                                error: moqui.handleAjaxError,
                                data: vm.$root.currentParameters,
                                success: function(responseObj, status, jqXHR) {
                                    // update display objects
                                    if (responseObj.messageList != null)
                                        vm.chatDataList = responseObj.messageList;
                                }
                            });
                        },
                        createMessage: function() {
                            var vm = this;
                            $.ajax({ type:"POST", url:"/apps/Message/FindMessage/createMessage",
                                data:this.newServiceInfo, dataType:"json",
                                headers:{ Accept:'application/json', 'X-CSRF-Token':this.$root.moquiSessionToken },
                                error:moqui.handleAjaxError,
                                success: function(responseObj, status, jqXHR) {
                                    console.log('createMessage success')
                                    vm.chatDataList.push({
                                        body:vm.newServiceInfo.body,
                                        communicationEventId:responseObj.newMessage.communicationEventId,
                                        contentUrl:responseObj.newMessage.contentUrl,
                                        sent:responseObj.newMessage.sent,
                                        fromPseudoId:responseObj.newMessage.fromPseudoId,
                                        partyId:vm.newServiceInfo.fromPartyId
                                    })
                                    vm.newServiceInfo.body = ""
                                    console.log(vm.chatDataList)
                                }
                            });
                        },
                        notificationCallback: function (jsonObj, webSocket) {
                            console.log('notificationCallback')
                            // console.log(jsonObj)
                            // console.log(this.chatDataList)
                            // console.log(this.chatDataList[this.chatDataList.length-1])
                            if (this.chatDataList[this.chatDataList.length-1].communicationEventId !== jsonObj.message.communicationEventId)
                                this.chatDataList.push(jsonObj.message)
                        },
                        onLoad (index, done) {
                            // console.log('onload')
                            // console.log(index)
                            // console.log(done)
                            setTimeout(() => {
                                var stop = false
                                if (this.chatDataList) {
                                    var vm = this;
                                    $.ajax({ type:"GET", url:"/apps/Message/FindMessage/getMessages",
                                        dataType:"json", headers:{ Accept:'application/json' },
                                        data: {fromPartyId:vm.$root.currentParameters.fromPartyId, toPartyId:vm.$root.currentParameters.toPartyId, offset:index},
                                        error: function() {
                                            // retry again on error
                                            done(false);
                                            moqui.handleAjaxError()
                                        },
                                        success: function(responseObj, status, jqXHR) {
                                            // update display objects
                                            // console.log(responseObj.messageList)
                                            if (responseObj.messageList !== null) {
                                                vm.chatDataList.push.apply(vm.chatDataList, responseObj.messageList);
                                            }
                                            if (responseObj.messageList === null || responseObj.messageList.length < 20) {
                                                // console.log('stop = true')
                                                stop = true
                                            }
                                            // console.log(stop)
                                            done(stop)
                                        }
                                    });
                                }
                            }, 100)
                        }
                    },
                    mounted: function() {
                        // console.log('FindMessage mounted')
                        // get chat right away
                        this.updateChatDataList();
                        this.$root.notificationClient.registerListener("ResistChatEvent", this.notificationCallback);
                    },
                }
            </script>
            ]]></text><text type="html,vuet"><![CDATA[
            <p><strong>Only supported in the 'qvt' render mode, go to the same URL under /qapps (instead of /apps or /vapps)</strong></p>
            ]]></text></render-mode>
    </widgets>
</screen>
