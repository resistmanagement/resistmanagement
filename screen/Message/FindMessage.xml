<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-3.xsd"
        default-menu-title="Messages" default-menu-index="3" default-menu-include="false" render-modes="vue,qvue" server-static="vue,qvue" standalone="true">

    <!-- TODO: Change these to makes sense in the context of a screen not a message. -->
    <parameter name="toPartyId"/>
    <parameter name="fromPartyId"/>

    <always-actions>
        <!-- TODO: Fix how this is handled for john.doe -->
        <!--        <log level="warn" message="toPartyId ${toPartyId}"/>-->
        <entity-find entity-name="mantle.party.PartyDetailAndRoleAndContentAndSettingAndRelationship" list="accountList" distinct="true" cache="true">
            <econdition field-name="roleTypeId" value="ClientManager"/>
            <econdition field-name="partySettingTypeId" value="PartyVisibility"/>
            <econdition field-name="partyContentTypeEnumId" value="PcntPrimaryImage"/>
            <econdition field-name="contentLocation" operator="is-not-null"/>
            <econdition field-name="relationshipTypeEnumId" value="PrtManager"/>
            <econdition field-name="fromRoleTypeId" value="Administrator"/>
            <econdition field-name="toRoleTypeId" value="ClientManager"/>
            <econdition field-name="fromPartyId" from="ec.user.userAccount?.partyId"/>
            <date-filter/><select-field field-name="partyId"/>
        </entity-find>
        <!--        <log level="warn" message="accountList ${accountList}"/>-->
        <set field="fromPartyId" from="accountList?.getFirst()?.partyId"/>
        <if condition="!fromPartyId"><return message="Not allowed" error="true" type="danger"/></if>
        <service-call name="resistmanagement.ResistServices.check#AccountEdit" in-map="[partyId:fromPartyId]" out-map="checkAccountEdit"/>
        <if condition="!checkAccountEdit.allowed"><return message="Not allowed" error="true" type="danger"/></if>
    </always-actions>

    <transition name="createMessage" require-session-token="true"><actions>
        <service-call name="resistmanagement.ResistServices.check#AccountEdit" in-map="[partyId:fromPartyId]" out-map="AccountEdit"/>
        <if condition="!AccountEdit?.allowed"><return message="Not allowed" error="true"/></if>
        <set field="entryDate" from="ec.user.getNowTimestamp()"/>
        <service-call name="mantle.party.CommunicationServices.create#Message" in-map="[toPartyId:toPartyId,fromPartyId:fromPartyId,body:body,communicationEventTypeId:'ResistChatMessage',entryDate:entryDate]" out-map="newMessage"/>
        <entity-find entity-name="mantle.party.PartyContent" list="accountContentList">
            <econdition field-name="partyId" from="fromPartyId"/>
            <econdition field-name="partyContentTypeEnumId" value="PcntPrimaryImage"/>
            <econdition field-name="contentLocation" operator="is-not-null"/>
            <select-field field-name="partyId, pseudoId, partyContentId, contentLocation"/>
            <order-by field-name="-contentDate"/></entity-find>
        <if condition="accountContentList"><set field="newMessage.contentUrl" from="'/custom/Message/FindMessage/downloadPartyContent?partyContentId=' + accountContentList.getFirst().partyContentId"/></if>
        <set field="newMessage.fromPseudoId" from="accountContentList.getFirst()?.party?.pseudoId"/>
        <set field="newMessage.sent" from="true"/>
        <set field="newMessage.entryDate" from="entryDate"/>
        <script>ec.web.sendJsonResponse([newMessage:newMessage])</script>
    </actions><default-response type="none"/></transition>
    <transition-include name="downloadPartyContent" location="component://resistmanagement/screen/Account/ViewAccount.xml"/>
    <transition name="getMessages" read-only="true">
        <actions>
            <!--        <log level="warn" message="context ${context.toString()}"/>-->

            <set field="accountList" from="[fromPartyId, toPartyId]"/>
            <entity-find entity-name="mantle.party.PartyContent" list="accountContentList">
                <econdition field-name="partyId" operator="in" from="accountList"/>
                <econdition field-name="partyContentTypeEnumId" value="PcntPrimaryImage"/>
                <econdition field-name="contentLocation" operator="is-not-null"/>
                <select-field field-name="partyId, pseudoId, partyContentId, contentLocation"/>
                <order-by field-name="-contentDate"/>
            </entity-find>
            <!--        <log level="warn" message="accountContentList ${accountContentList.partyId}"/>-->

            <set field="toParty" from="accountContentList?.find{it.partyId == toPartyId}"/>
            <set field="fromParty" from="accountContentList?.find{it.partyId == fromPartyId}"/>

            <!--            <log level="warn" message="toParty ${toParty}"/>-->
            <!--            <log level="warn" message="fromParty ${fromParty}"/>-->

            <!--            <log level="warn" message="offset ${offset}"/>-->
<!--            <log level="warn" message="earliestEntryDate ${earliestEntryDate}"/>-->
            <entity-find entity-name="mantle.party.communication.CommunicationEventAndPurpose" list="commEventList" limit="20">
                <econditions combine="or">
                    <econditions>
                        <econdition field-name="fromPartyId" ignore-if-empty="true"/>
                        <econdition field-name="toPartyId" ignore-if-empty="true"/>
                    </econditions>
                    <econditions>
                        <econdition field-name="fromPartyId" from="toPartyId" ignore-if-empty="true"/>
                        <econdition field-name="toPartyId" from="fromPartyId" ignore-if-empty="true"/>
                    </econditions>
                </econditions>
                <econdition field-name="communicationEventTypeId" value="ResistChatMessage"/>
                <econdition field-name="entryDate" operator="less" from="earliestEntryDate ? earliestEntryDate as Long : ec.user.getNowTimestamp()"/>
                <select-field field-name="communicationEventId"/><select-field field-name="entryDate"/>
                <select-field field-name="statusId"/><select-field field-name="fromPartyId"/><select-field field-name="toPartyId"/>
                <select-field field-name="body"/>
                <order-by field-name="-entryDate"/>
            </entity-find>

            <!--            <log level="warn" message="commEventList ${commEventList}"/>-->

            <set field="messageList" from="[]"/>
            <iterate list="commEventList" entry="commEvent">
                <set field="partyContent" from="accountContentList?.find{it.partyId == commEvent.fromPartyId}"/>
                <!--                <log level="warn" message="partyContent ${partyContent}"/>-->
                <!--                <log level="warn" message="commEvent.fromPartyId ${commEvent.fromPartyId}"/>-->
                <set field="message" from="[
                    communicationEventId:commEvent.communicationEventId,
                    partyId:partyContent.partyId,
                    fromPseudoId:partyContent.party.pseudoId,
                    body:commEvent.body,
                    contentUrl:'/custom/Message/FindMessage/downloadPartyContent?partyContentId=' + partyContent.partyContentId,
                    entryDate:commEvent.entryDate
                ]"/>
                <set field="message.sent" from="commEvent.fromPartyId == fromPartyId"/>
                <script>messageList.add(message)</script>
            </iterate>

            <!--            <log level="warn" message="messageList ${messageList}"/>-->
            <script>ec.web.sendJsonResponse([messageList:messageList])</script>
        </actions>
        <default-response type="none"/></transition>

    <widgets>
        <render-mode><text type="qvue"><![CDATA[
            <template>
                <div class="q-pa-md row justify-center">
                    <div style="width: 100%; max-width: 400px">
                        <q-infinite-scroll @load="onScrollLoad" :initial-index="0" reverse ref="chatScroll">
                            <template slot="loading">
                                <div class="row justify-center q-my-md">
                                    <q-spinner color="primary" name="dots" size="40px"/>
                                </div>
                            </template>
                            <q-chat-message v-for="chatData in chatDataListReversed" :key="chatData.communicationEventId"
                                            class="scroll"
                                            :name="chatData.fromPseudoId"
                                            :avatar="chatData.contentUrl"
                                            :text="[chatData.body]"
                                            :sent="chatData.sent"
                            />
                        </q-infinite-scroll>
                        <q-page-scroller reverse position="bottom">
                            <q-btn fab icon="keyboard_arrow_down" color="primary" label="Scroll to Bottom"/>
                        </q-page-scroller>
                    </div>
                    <q-footer reveal bordered class="bg-grey-1">
                        <div class="q-pa-md row justify-center">
                            <div style="width: 100%; max-width: 400px">
                                <q-form @submit.prevent="createMessage" class="q-pa-md">
                                    <div class="row">
                                        <div ref="bodyInput" class="col-10"><m-text-line dense outlined name="body" v-model="newServiceInfo.body" stack-label label="Message" type="text" size="100"></m-text-line></div>

                                        <q-btn dense outline no-caps color="primary" class="col" type="submit" name="submitBtn" label="Send"></q-btn>
                                    </div>
                                </q-form>
                            </div>
                        </div>
                    </q-footer>
                </div>
            </template>
            <script>
                module.exports = {
                    data: function() { return {
                        chatDataList: [], newServiceInfo:{ body:"", fromPartyId:this.$root.currentParameters.fromPartyId, toPartyId:this.$root.currentParameters.toPartyId }, items: [ {}, {}, {}, {}, {}, {}, {} ]
                    } },
                    computed: {
                        chatDataListReversed: function() {
                            return this.chatDataList.slice().reverse()
                        }
                    },
                    methods: {
                        createMessage: function() {
                            var vm = this;
                            $.ajax({ type:"POST", url:"/custom/Message/FindMessage/createMessage",
                                data:this.newServiceInfo, dataType:"json",
                                headers:{ Accept:'application/json', 'X-CSRF-Token':this.$root.moquiSessionToken },
                                error:moqui.handleAjaxError,
                                success: function(responseObj, status, jqXHR) {
                                    // console.log('createMessage success')

                                    vm.chatDataList.unshift({
                                        body:vm.newServiceInfo.body,
                                        communicationEventId:responseObj.newMessage.communicationEventId,
                                        contentUrl:responseObj.newMessage.contentUrl,
                                        sent:responseObj.newMessage.sent,
                                        fromPseudoId:responseObj.newMessage.fromPseudoId,
                                        partyId:vm.newServiceInfo.fromPartyId
                                    })
                                    vm.newServiceInfo.body = ""
                                    vm.focusBodyElement();

                                    // scroll down to comment
                                    setTimeout(() => {
                                        document.documentElement.scrollTop = document.documentElement.scrollHeight;
                                        document.body.scrollTop = document.body.scrollHeight;
                                    }, 10);


                                    // console.log(vm.chatDataList)
                                }
                            });
                        },
                        notificationCallback: function (jsonObj, webSocket) {
                            // console.log('notificationCallback')
                            // console.log(jsonObj)
                            // console.log(this.chatDataList)
                            // console.log(this.chatDataList[this.chatDataList.length-1])
                            if (this.chatDataList.length ? this.chatDataList[this.chatDataList.length-1].communicationEventId !== jsonObj.message.communicationEventId : false)
                                this.chatDataList.unshift(jsonObj.message)
                        },
                        onScrollLoad (index, done) {
                            // console.log('onScrollLoad')
                            // console.log(index)
                            // console.log(done)
                            setTimeout(() => {
                                var stop = false

                                // console.log(this.chatDataList)

                                var earliestEntryDate = this.chatDataList.length ? this.chatDataList[this.chatDataList.length-1].entryDate : null;
                                // console.log(earliestEntryDate)
                                if (this.chatDataList) {
                                    var vm = this;
                                    $.ajax({ type:"GET", url:"/custom/Message/FindMessage/getMessages",
                                        dataType:"json", headers:{ Accept:'application/json' },
                                        data: {fromPartyId:vm.$root.currentParameters.fromPartyId, toPartyId:vm.$root.currentParameters.toPartyId, earliestEntryDate:earliestEntryDate},
                                        error: function() {
                                            // retry again on error
                                            done(false)
                                            moqui.handleAjaxError()
                                        },
                                        success: function(responseObj, status, jqXHR) {
                                            // update display objects
                                            // console.log(responseObj.messageList)
                                            if (responseObj.messageList !== null) {
                                                vm.chatDataList.push.apply(vm.chatDataList, responseObj.messageList);
                                            }
                                            // for (key in vm.chatDataList) {
                                            //     console.log(vm.chatDataList[key].communicationEventId)
                                            // }
                                            if (responseObj.messageList === null || responseObj.messageList.length < 20) {
                                                // console.log('stop = true')
                                                stop = true
                                            }
                                            // console.log(stop)
                                            done(stop)
                                        }
                                    });
                                }
                            }, 100)
                        },
                        focusBodyElement: function () {
                            // Focus the input body element
                            var jqEl = $(this.$refs.bodyInput);
                            if (jqEl) jqEl.find("input:visible:not([type='submit']):first").focus();
                        }
                    },
                    mounted: function() {
                        console.log('FindMessage mounted')
                        this.$root.notificationClient.registerListener("ResistChatEvent", this.notificationCallback);
                        this.focusBodyElement();
                    },

                }
            </script>
            ]]></text></render-mode>
    </widgets>
</screen>
